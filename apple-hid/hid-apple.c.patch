--- hid-apple-source.c	2019-08-29 16:28:06.011124701 +0200
+++ hid-apple.c	2019-08-29 16:28:39.630594240 +0200
@@ -7,6 +7,7 @@
  *  Copyright (c) 2005 Michael Haboustak <mike-@cinci.rr.com> for Concept2, Inc
  *  Copyright (c) 2006-2007 Jiri Kosina
  *  Copyright (c) 2008 Jiri Slaby <jirislaby@gmail.com>
+ *  Copyright (c) 2019 Paul Pawlowski <paul@mrarm.io>
  */
 
 /*
@@ -30,6 +31,7 @@
 #define APPLE_INVERT_HWHEEL	0x0040
 #define APPLE_IGNORE_HIDINPUT	0x0080
 #define APPLE_NUMLOCK_EMULATION	0x0100
+#define APPLE_BACKLIGHT_CTL	0x0200
 
 #define APPLE_FLAG_FKEY		0x01
 
@@ -51,11 +53,18 @@
                                "(For people who want to keep Windows PC keyboard muscle memory. "
                                "[0] = as-is, Mac layout. 1 = swapped, Windows layout.)");
 
+struct apple_sc_backlight;
 struct apple_sc {
     unsigned long quirks;
     unsigned int fn_on;
     DECLARE_BITMAP(pressed_fn, KEY_CNT);
     DECLARE_BITMAP(pressed_numlock, KEY_CNT);
+    struct apple_sc_backlight *backlight;
+};
+struct apple_sc_backlight {
+    struct led_classdev cdev;
+    struct hid_device *hdev;
+    unsigned short backlight_off, backlight_on_min, backlight_on_max;
 };
 
 struct apple_key_translation {
@@ -363,6 +372,11 @@
     return 0;
 }
 
+static int apple_init_backlight(struct hid_device *hdev);
+static int apple_set_backlight(struct hid_device *hdev, u16 value, u16 rate);
+static int apple_led_set_backlight(struct led_classdev *led_cdev,
+        enum led_brightness brightness);
+
 static int apple_probe(struct hid_device *hdev,
                        const struct hid_device_id *id)
 {
@@ -398,9 +412,106 @@
         return ret;
     }
 
+    if (quirks & APPLE_BACKLIGHT_CTL)
+        apple_init_backlight(hdev);
+
     return 0;
 }
 
+struct apple_backlight_config_report {
+    u8 report_id;
+    u8 version;
+    u16 backlight_off, backlight_on_min, backlight_on_max;
+};
+struct apple_backlight_set_report {
+    u8 report_id;
+    u8 version;
+    u16 backlight;
+    u16 rate;
+};
+
+static bool apple_check_backlight_support(struct hid_device *hdev)
+{
+    int i;
+    unsigned hid;
+    struct hid_report *report;
+
+    list_for_each_entry(report, &hdev->report_enum[HID_INPUT_REPORT].report_list, list) {
+        for (i = 0; i < report->maxfield; i++) {
+            hid = report->field[i]->usage->hid;
+            if ((hid & HID_USAGE_PAGE) == HID_UP_MSVENDOR && (hid & HID_USAGE) == 0xf)
+                return true;
+        }
+    }
+    return false;
+}
+
+static int apple_init_backlight(struct hid_device *hdev)
+{
+    int ret;
+    struct apple_sc *asc = hid_get_drvdata(hdev);
+    struct apple_backlight_config_report *rep;
+
+    if (!apple_check_backlight_support(hdev))
+        return -EINVAL;
+
+    rep = kmalloc(0x200, GFP_KERNEL);
+    ret = hid_hw_raw_request(hdev, 0xBFu, (u8 *) rep, sizeof(*rep), HID_FEATURE_REPORT, HID_REQ_GET_REPORT);
+    if (ret < 0) {
+        hid_err(hdev, "backlight request failed\n");
+        return ret;
+    }
+    if (ret < 8 || rep->version != 1) {
+        hid_err(hdev, "backlight config struct: bad version %i\n", rep->version);
+        kfree(rep);
+        return -EINVAL;
+    }
+
+    hid_dbg(hdev, "backlight config: off=%u, on_min=%u, on_max=%u\n",
+            rep->backlight_off, rep->backlight_on_min, rep->backlight_on_max);
+
+    asc->backlight = devm_kzalloc(&hdev->dev, sizeof(*asc->backlight), GFP_KERNEL);
+    if (!asc->backlight) {
+        kfree(rep);
+        return -ENOMEM;
+    }
+
+    asc->backlight->hdev = hdev;
+    asc->backlight->cdev.name = "apple::kbd_backlight";
+    asc->backlight->cdev.max_brightness = rep->backlight_on_max;
+    asc->backlight->cdev.brightness_set_blocking = apple_led_set_backlight;
+    kfree(rep);
+
+    apple_set_backlight(hdev, 0, 0);
+
+    return devm_led_classdev_register(&hdev->dev, &asc->backlight->cdev);
+}
+
+static int apple_set_backlight(struct hid_device *hdev, u16 value, u16 rate)
+{
+    int ret;
+    struct apple_backlight_set_report *rep;
+
+    rep = kmalloc(sizeof(*rep), GFP_KERNEL);
+    rep->report_id = 0xB0;
+    rep->version = 1;
+    rep->backlight = value;
+    rep->rate = rate;
+
+    ret = hid_hw_raw_request(hdev, 0xB0u, (u8 *) rep, sizeof(*rep), HID_OUTPUT_REPORT, HID_REQ_SET_REPORT);
+    kfree(rep);
+    if (ret)
+        return ret;
+    return 0;
+}
+
+static int apple_led_set_backlight(struct led_classdev *led_cdev,
+        enum led_brightness brightness)
+{
+    struct apple_sc_backlight *backlight = container_of(led_cdev, struct apple_sc_backlight, cdev);
+    return apple_set_backlight(backlight->hdev, brightness, 0);
+}
+
 static const struct hid_device_id apple_devices[] = {
         { HID_USB_DEVICE(USB_VENDOR_ID_APPLE, USB_DEVICE_ID_APPLE_MIGHTYMOUSE),
                 .driver_data = APPLE_MIGHTYMOUSE | APPLE_INVERT_HWHEEL },
@@ -564,6 +675,10 @@
                 .driver_data = APPLE_NUMLOCK_EMULATION | APPLE_HAS_FN },
         { HID_USB_DEVICE(USB_VENDOR_ID_APPLE, USB_DEVICE_ID_APPLE_GEYSER1_TP_ONLY),
                 .driver_data = APPLE_NUMLOCK_EMULATION | APPLE_HAS_FN },
+        { HID_USB_DEVICE(USB_VENDOR_ID_APPLE, USB_DEVICE_ID_APPLE_GEYSER1_TP_ONLY),
+                .driver_data = APPLE_NUMLOCK_EMULATION | APPLE_HAS_FN },
+        { HID_USB_DEVICE(USB_VENDOR_ID_APPLE, 0x027B),
+                .driver_data = APPLE_HAS_FN | APPLE_BACKLIGHT_CTL },
 
         { }
 };
